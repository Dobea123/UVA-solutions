// theF.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Solution : Build the graph using the info and apply a straightforward implementation of Kuhn's Algorithm for MCBM

#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
#define vi std::vector<int>
#define ii std::pair<int,int>
#define INF (1e9 + 5)
#define no std::cout << "NO" << '\n'
#define yes std::cout << "YES" << '\n'
#define fastio std::ios_base::sync_with_stdio(0); std::cin.tie(0);
#define UNVISITED (-1)
#define VISITED 1
#define EXPLORED 2
#define vii std::vector<ii>
#define LSOne(S) ((S) &-(S))

const int MOD = 1e9 + 7;
//const int MOD = 998244353;
// using namespace __gnu_pbds;
// typedef tree<int, null_type, std::less<int>, rb_tree_tag,
//              tree_order_statistics_node_update>
//     oset;

std::vector<std::map<int,int>> left;
std::vector<std::map<int,int>> right;
std::vector<std::vector<int>> AL;
vi match, visited;

int Aug(int i) {
    if (visited[i] == VISITED) return 0;
    visited[i] = VISITED;

    for (auto j : AL[i]) {
        if (match[j] == UNVISITED or Aug(match[j])) {
            match[j] = i;
            return 1;
        }
    }
    return 0;
}

int main() {
    int V,C;
    while (scanf("%d %d",&V,&C) == 2) {
        left.assign(V,std::map<int,int>());
        right.assign(C,std::map<int,int>());
        match.assign(C,UNVISITED);
        visited.assign(V,UNVISITED);
        AL.assign(V, std::vector<int>());

        for (int i = 0; i < V; i++) {
            std::string temp; std::cin >> temp;
            for (auto j : temp) {
                left[i][j]++;
            }
        }

        for (int i = 0; i < C; ++i) {
            std::string temp; std::cin >> temp;
            for (auto j : temp) {
                right[i][j]++;
            }
        }

        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < C; ++j) {
                bool flag = true;
                for (auto k : right[j]) {
                    if (k.second > left[i][k.first]) flag = false;
                }
                if (flag) {
                    AL[i].push_back(j);
                }
            }
        }

        int match = 0;
        for (int i = 0; i < V; i++) {
            visited.assign(V,UNVISITED);
            match += Aug(i);
        }

        printf("%d\n", match);
    }
}




/*
1 1
icpc
pic
4 3
sequoia
march
may
tree
ae
aeiou
acm
*/
// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started:
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
