// theF.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Solution : binary search the pie size then assign pieces greedily;

#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
#define vi std::vector<int>
#define ii std::pair<int,int>
#define INF (1e9 + 5)
#define no std::cout << "NO" << '\n'
#define yes std::cout << "YES" << '\n'
#define fastio std::ios_base::sync_with_stdio(0); std::cin.tie(0);
#define UNVISITED (-1)
#define VISITED 1
#define EXPLORED 2
#define vii std::vector<ii>
#define LSOne(S) ((S) &-(S))

const int MOD = 1e9 + 7;
//const int MOD = 998244353;
// using namespace __gnu_pbds;
// typedef tree<int, null_type, std::less<int>, rb_tree_tag,
//              tree_order_statistics_node_update>
//     oset;



int main() {
    int T; scanf("%d",&T);
    while(T--) {
        int N,F; scanf("%d %d",&N,&F);
        ++F;

        std::vector<double> v(N);
        double high = -INF ,low = INF;
        for (int i = 0; i < N; ++i) {
            scanf("%lf",&v[i]);
            high = std::max(high,v[i]);
            low = std::min(low,v[i]);
        }
        high *= high * M_PI;
        low = 0;
        double ans = (high + low) / 2;

        for (int i = 0; i < 60; ++i) {
            double mid = (high + low) / 2;
            int num = 0;

            for (int j = 0; j < N; ++j) {
                double size = M_PI * v[j] * v[j];
                num += size / mid;
            }

            if (num >= F) {
                low = mid;
                ans = high;
            }else {
                high = mid;
            }
        }

        printf("%.4lf\n",ans);
    }
}

/*
3
3 3
4 3 3
1 24
5
10 5
1 4 2 3 4 5 6 5 4 2
*/
// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started:
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln fi
