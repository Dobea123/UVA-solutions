// theF.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Solution : for each horizontal line y = c, take the average of all the points and check if this average matches the average for all horizontal lines which intersect one or more points
// Complexity : O(NlogN)

#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
#define vi std::vector<int>
#define ii std::pair<int,int>
#define INF (1e9 + 5)
#define no std::cout << "NO" << '\n'
#define yes std::cout << "YES" << '\n'
#define fastio std::ios_base::sync_with_stdio(0); std::cin.tie(0);
#define UNVISITED (-1)
#define VISITED 1
#define EXPLORED 2
#define vii std::vector<ii>
#define LSOne(S) ((S) &-(S))

const int MOD = 1e9 + 7;

// using namespace __gnu_pbds;
// typedef tree<std::pair<int,int>, null_type, std::less<std::pair<int,int>>, rb_tree_tag,
//               tree_order_statistics_node_update>
//      oset;


int main() {
    int T; scanf("%d",&T);
    while(T--) {
        int N; scanf("%d",&N);
        std::map<int, std::vector<int>> points;

        for (int i = 0; i < N; i++) {
            int x,y; scanf("%d%d",&x,&y);
            points[y].push_back(x);
        }

        bool out = true;
        double ravg = INF;
        for (int i = -1e4; i <= 1e4; ++i) {
            double avg = 0;
            int cnt = 0;

            for (auto j : points[i]) {
                avg += j;
                ++cnt;
            }

            if (cnt > 0) {
                avg /= cnt;
                if (ravg == INF) {
                    ravg = avg;
                }else if (ravg != avg) {
                    out = false;
                }
            }
        }

        if (out) {
            printf("YES\n");
        }else {
            printf("NO\n");
        }
    }
}




/*
3
5
-2 5
0 0
6 5
4 0
2 3
4
2 3
0 4
4 0
0 0
4
5 14
6 10
5 10
6 14

*/
// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started:
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln fi
