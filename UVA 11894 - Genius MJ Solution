// theF.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Solution : get the Average of the pins_points and translate all the pins points by the delta between the origin and the Average, do the same for the socket points then rotate by 0-90-180-270 and brute-force
// match each point in the new sorted vector and the other pins vector (also sorted) if it doesnt match then rotate, if after all rotations there's still no match then the answer is "NOT MATCHED" otherwise "MATCHED"

#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
#define vi std::vector<int>
#define ii std::pair<int,int>
#define INF (1e9 + 5)
#define no std::cout << "NO" << '\n'
#define yes std::cout << "YES" << '\n'
#define fastio std::ios_base::sync_with_stdio(0); std::cin.tie(0);
#define UNVISITED (-1)
#define VISITED 1
#define EXPLORED 2
#define vii std::vector<ii>
#define LSOne(S) ((S) &-(S))

const int MOD = 1e9 + 7;

// using namespace __gnu_pbds;
// typedef tree<std::pair<int,int>, null_type, std::less<std::pair<int,int>>, rb_tree_tag,
//               tree_order_statistics_node_update>
//      oset;

std::vector<std::pair<double, double>> rotate(double theta, std::vector<std::pair<double, double>> org) {
    std::vector<std::pair<double, double>> res;
    double rad = theta * M_PI / 180;

    for (auto j : org) {
        res.push_back({j.first * cos(rad) - j.second * sin(rad), j.second * cos(rad) + j.first * sin(rad)});
    }

    return res;
}

int main() {
    int T; scanf("%d",&T);
    while(T--) {
        int N; scanf("%d",&N);
        std::vector<std::pair<double,double>> socket(N), pins(N);

        for (auto &j : pins) {
            scanf("%lf %lf",&j.first, &j.second);
        }

        for (auto &j : socket) {
            scanf("%lf %lf",&j.first, &j.second);
        }

        double pins_avg_x = 0, pins_avg_y = 0;
        for (int i = 0; i < N; i++) {
            pins_avg_x += pins[i].first;
            pins_avg_y += pins[i].second;
        }

        pins_avg_x /= N;
        pins_avg_y /= N;

        double socket_avg_x = 0, socket_avg_y = 0;
        for (int i = 0; i < N; i++) {
            socket_avg_x += socket[i].first;
            socket_avg_y += socket[i].second;
        }

        socket_avg_x /= N;
        socket_avg_y /= N;

        for (int i = 0; i < N; ++i) {
            pins[i].first += (0 - pins_avg_x);
            pins[i].second += (0 - pins_avg_y);
        }

        for (int i = 0; i < N; i++) {
            socket[i].first += (0 - socket_avg_x);
            socket[i].second += (0 - socket_avg_y);
        }

        bool out = false;
        sort(pins.begin(), pins.end());
        int theta = 0;
        for (int i = 0; i <= 3; i++) {
            auto temp = rotate(theta, socket);

            sort(temp.begin(), temp.end());
            bool match = true;
            for (int j = 0; j < N; j++) {
                if (fabs(temp[j].first - pins[j].first) > 1e-6 or fabs(temp[j].second - pins[j].second) > 1e-6) {
                    match = false;
                }
            }

            if (match) out = true;
            theta += 90;
        }

        if (out) printf("MATCHED\n");
        else printf("NOT MATCHED\n");
    }
}




/*
2
3
0 0
1 0
0 1
-2 0
-1 0
-1 -1
2
0 1
1 0
0 -1
0 0
*/
// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started:
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln fi
